/*
 * $Id: 1f09f7d633b139564c83d13d398d2d38fa32c8f1 $
 *
 * This file is part of the iText (R) project.
 * Copyright (c) 2014-2015 iText Group NV
 * Authors: Bruno Lowagie, Paulo Soares, et al.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY
 * ITEXT GROUP. ITEXT GROUP DISCLAIMS THE WARRANTY OF NON INFRINGEMENT
 * OF THIRD PARTY RIGHTS
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://itextpdf.com/terms-of-use/
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License,
 * a covered work must retain the producer line in every PDF that is created
 * or manipulated using iText.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the iText software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers as an ASP,
 * serving PDFs on the fly in a web application, shipping iText with a closed
 * source product.
 *
 * For more information, please contact iText Software Corp. at this
 * address: sales@itextpdf.com
 *
 *
 * This class is based on the C# open source freeware library Clipper:
 * http://www.angusj.com/delphi/clipper.php
 * The original classes were distributed under the Boost Software License:
 *
 * Freeware for both open source and commercial applications
 * Copyright 2010-2014 Angus Johnson
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package com.itextpdf.text.pdf.parser.clipper

import com.itextpdf.text.pdf.parser.clipper.Point.LongPoint

import java.util.ArrayList
import java.util.Collections

/**
 * A pure convenience class to avoid writing List everywhere.

 * @author Tobias Mahlmann
 */
class Path : ArrayList<LongPoint> {
    internal class Join {
        var outPt1: Path.OutPt
        var outPt2: Path.OutPt
        var offPt: LongPoint? = null

    }

    internal class OutPt {

        var idx: Int = 0
        var pt: LongPoint
        var next: OutPt

        var prev: OutPt

        fun duplicate(InsertAfter: Boolean): Path.OutPt {
            val result = Path.OutPt()
            result.pt = LongPoint(pt)
            result.idx = idx
            if (InsertAfter) {
                result.next = next
                result.prev = this
                next.prev = result
                next = result
            } else {
                result.prev = prev
                result.next = this
                prev.next = result
                prev = result
            }
            return result
        }

        //there appears to be at least 2 vertices at bottomPt so ...
        val bottomPt: Path.OutPt
            get() {
                var dups: Path.OutPt? = null
                var p: Path.OutPt = next
                var pp: Path.OutPt = this
                while (p !== pp) {
                    if (p.pt.y > pp.pt.y) {
                        pp = p
                        dups = null
                    } else if (p.pt.y == pp.pt.y && p.pt.x <= pp.pt.x) {
                        if (p.pt.x < pp.pt.x) {
                            dups = null
                            pp = p
                        } else {
                            if (p.next !== pp && p.prev !== pp) {
                                dups = p
                            }
                        }
                    }
                    p = p.next
                }
                if (dups != null) {
                    while (dups !== p) {
                        if (!isFirstBottomPt(p, dups)) {
                            pp = dups
                        }
                        dups = dups!!.next
                        while (dups!!.pt != pp.pt) {
                            dups = dups.next
                        }
                    }
                }
                return pp
            }

        val pointCount: Int
            get() {

                var result = 0
                var p: Path.OutPt? = this
                do {
                    result++
                    p = p!!.next
                } while (p !== this && p != null)
                return result
            }

        fun reversePolyPtLinks() {

            var pp1: Path.OutPt
            var pp2: Path.OutPt
            pp1 = this
            do {
                pp2 = pp1.next
                pp1.next = pp1.prev
                pp1.prev = pp2
                pp1 = pp2
            } while (pp1 !== this)
        }

        companion object {
            fun getLowerMostRec(outRec1: OutRec, outRec2: OutRec): OutRec {
                //work out which polygon fragment has the correct hole state ...
                if (outRec1.bottomPt == null) {
                    outRec1.bottomPt = outRec1.points!!.bottomPt
                }
                if (outRec2.bottomPt == null) {
                    outRec2.bottomPt = outRec2.points!!.bottomPt
                }
                val bPt1 = outRec1.bottomPt
                val bPt2 = outRec2.bottomPt
                if (bPt1.pt.y > bPt2.pt.y) {
                    return outRec1
                } else if (bPt1.pt.y < bPt2.pt.y) {
                    return outRec2
                } else if (bPt1.pt.x < bPt2.pt.x) {
                    return outRec1
                } else if (bPt1.pt.x > bPt2.pt.x) {
                    return outRec2
                } else if (bPt1.next === bPt1) {
                    return outRec2
                } else if (bPt2.next === bPt2) {
                    return outRec1
                } else if (isFirstBottomPt(bPt1, bPt2)) {
                    return outRec1
                } else {
                    return outRec2
                }
            }

            private fun isFirstBottomPt(btmPt1: Path.OutPt, btmPt2: Path.OutPt): Boolean {
                var p: Path.OutPt = btmPt1.prev
                while (p.pt == btmPt1.pt && p != btmPt1) {
                    p = p.prev
                }
                val dx1p = Math.abs(LongPoint.getDeltaX(btmPt1.pt, p.pt))
                p = btmPt1.next
                while (p.pt == btmPt1.pt && p != btmPt1) {
                    p = p.next
                }
                val dx1n = Math.abs(LongPoint.getDeltaX(btmPt1.pt, p.pt))

                p = btmPt2.prev
                while (p.pt == btmPt2.pt && p != btmPt2) {
                    p = p.prev
                }
                val dx2p = Math.abs(LongPoint.getDeltaX(btmPt2.pt, p.pt))
                p = btmPt2.next
                while (p.pt == btmPt2.pt && p == btmPt2) {
                    p = p.next
                }
                val dx2n = Math.abs(LongPoint.getDeltaX(btmPt2.pt, p.pt))
                return dx1p >= dx2p && dx1p >= dx2n || dx1n >= dx2p && dx1n >= dx2n
            }
        }
    }

    protected class Maxima {
        protected var X: Long = 0
        protected var Next: Maxima
        protected var Prev: Maxima
    }

    internal class OutRec {
        var Idx: Int = 0

        var isHole: Boolean = false

        var isOpen: Boolean = false
        var firstLeft: OutRec? = null //see comments in clipper.pas
        var points: Path.OutPt? = null
        var bottomPt: Path.OutPt? = null
        var polyNode: PolyNode

        fun area(): Double {
            var op: OutPt? = points ?: return 0.0
            var a = 0.0
            do {
                a = a + (op!!.prev.pt.x + op.pt.x).toDouble() * (op.prev.pt.y - op.pt.y).toDouble()
                op = op.next
            } while (op !== points)
            return a * 0.5
        }

        fun fixHoleLinkage() {
            //skip if an outermost polygon or
            //already already points to the correct FirstLeft ...
            if (firstLeft == null || isHole != firstLeft!!.isHole && firstLeft!!.points != null) {
                return
            }

            var orfl = firstLeft
            while (orfl != null && (orfl.isHole == isHole || orfl.points == null)) {
                orfl = orfl.firstLeft
            }
            firstLeft = orfl
        }
    }

    constructor() : super() {
    }

    constructor(points: Array<Point.LongPoint>) : this() {
        for (point in points) {
            add(point)
        }
    }

    constructor(cnt: Int) : super(cnt) {
    }

    constructor(c: Collection<LongPoint>) : super(c) {
    }

    fun area(): Double {
        val cnt = size
        if (cnt < 3) {
            return 0.0
        }
        var a = 0.0
        var i = 0
        var j = cnt - 1
        while (i < cnt) {
            a += (get(j).x.toDouble() + get(i).x) * (get(j).y.toDouble() - get(i).y)
            j = i
            ++i
        }
        return -a * 0.5
    }

    @JvmOverloads fun cleanPolygon(distance: Double = 1.415): Path {
        //distance = proximity in units/pixels below which vertices will be stripped.
        //Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have
        //both x & y coords within 1 unit, then the second vertex will be stripped.

        var cnt = size

        if (cnt == 0) {
            return Path()
        }

        var outPts: Array<Path.OutPt>? = arrayOfNulls(cnt)
        for (i in 0..cnt - 1) {
            outPts[i] = Path.OutPt()
        }

        for (i in 0..cnt - 1) {
            outPts!![i].pt = get(i)
            outPts[i].next = outPts[(i + 1) % cnt]
            outPts[i].next.prev = outPts[i]
            outPts[i].idx = 0
        }

        val distSqrd = distance * distance
        var op: Path.OutPt = outPts!![0]
        while (op.idx == 0 && op.next !== op.prev) {
            if (Point.arePointsClose(op.pt, op.prev.pt, distSqrd)) {
                op = excludeOp(op)
                cnt--
            } else if (Point.arePointsClose(op.prev.pt, op.next.pt, distSqrd)) {
                excludeOp(op.next)
                op = excludeOp(op)
                cnt -= 2
            } else if (Point.slopesNearCollinear(op.prev.pt, op.pt, op.next.pt, distSqrd)) {
                op = excludeOp(op)
                cnt--
            } else {
                op.idx = 1
                op = op.next
            }
        }

        if (cnt < 3) {
            cnt = 0
        }
        val result = Path(cnt)
        for (i in 0..cnt - 1) {
            result.add(op.pt)
            op = op.next
        }
        outPts = null
        return result
    }

    fun isPointInPolygon(pt: LongPoint): Int {
        //returns 0 if false, +1 if true, -1 if pt ON polygon boundary
        //See "The Point in Polygon Problem for Arbitrary Polygons" by Hormann & Agathos
        //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf
        var result = 0
        val cnt = size
        if (cnt < 3) {
            return 0
        }
        var ip = get(0)
        for (i in 1..cnt) {
            val ipNext = if (i == cnt) get(0) else get(i)
            if (ipNext.y == pt.y) {
                if (ipNext.x == pt.x || ip.y == pt.y && ipNext.x > pt.x == ip.x < pt.x) {
                    return -1
                }
            }
            if (ip.y < pt.y != ipNext.y < pt.y) {
                if (ip.x >= pt.x) {
                    if (ipNext.x > pt.x) {
                        result = 1 - result
                    } else {
                        val d = (ip.x - pt.x).toDouble() * (ipNext.y - pt.y) - (ipNext.x - pt.x).toDouble() * (ip.y - pt.y)
                        if (d == 0.0) {
                            return -1
                        } else if (d > 0 == ipNext.y > ip.y) {
                            result = 1 - result
                        }
                    }
                } else {
                    if (ipNext.x > pt.x) {
                        val d = (ip.x - pt.x).toDouble() * (ipNext.y - pt.y) - (ipNext.x - pt.x).toDouble() * (ip.y - pt.y)
                        if (d == 0.0) {
                            return -1
                        } else if (d > 0 == ipNext.y > ip.y) {
                            result = 1 - result
                        }
                    }
                }
            }
            ip = ipNext
        }
        return result
    }

    fun orientation(): Boolean {
        return area() >= 0
    }

    fun reverse() {
        Collections.reverse(this)
    }

    fun TranslatePath(delta: LongPoint): Path {
        val outPath = Path(size)
        for (i in 0..size - 1) {
            outPath.add(LongPoint(get(i).x + delta.x, get(i).y + delta.y))
        }
        return outPath
    }

    companion object {

        private fun excludeOp(op: Path.OutPt): Path.OutPt {
            val result = op.prev
            result.next = op.next
            op.next.prev = result
            result.idx = 0
            return result
        }

        /**

         */
        private val serialVersionUID = -7120161578077546673L
    }
}
