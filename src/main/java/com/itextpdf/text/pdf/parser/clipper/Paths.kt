/*
 * $Id: ec353af2fb19672525596738a3f8a2d66e003c7a $
 *
 * This file is part of the iText (R) project.
 * Copyright (c) 2014-2015 iText Group NV
 * Authors: Bruno Lowagie, Paulo Soares, et al.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY
 * ITEXT GROUP. ITEXT GROUP DISCLAIMS THE WARRANTY OF NON INFRINGEMENT
 * OF THIRD PARTY RIGHTS
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * http://itextpdf.com/terms-of-use/
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License,
 * a covered work must retain the producer line in every PDF that is created
 * or manipulated using iText.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the iText software without
 * disclosing the source code of your own applications.
 * These activities include: offering paid services to customers as an ASP,
 * serving PDFs on the fly in a web application, shipping iText with a closed
 * source product.
 *
 * For more information, please contact iText Software Corp. at this
 * address: sales@itextpdf.com
 *
 *
 * This class is based on the C# open source freeware library Clipper:
 * http://www.angusj.com/delphi/clipper.php
 * The original classes were distributed under the Boost Software License:
 *
 * Freeware for both open source and commercial applications
 * Copyright 2010-2014 Angus Johnson
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
package com.itextpdf.text.pdf.parser.clipper

import java.util.ArrayList

/**
 * A pure convenience class to avoid writing List everywhere.

 * @author Tobias Mahlmann
 */
class Paths : ArrayList<Path> {

    constructor() : super() {
    }

    constructor(initialCapacity: Int) : super(initialCapacity) {
    }

    fun addPolyNode(polynode: PolyNode, nt: PolyNode.NodeType) {
        var match = true
        when (nt) {
            PolyNode.NodeType.OPEN -> return
            PolyNode.NodeType.CLOSED -> match = !polynode.isOpen
            else -> {
            }
        }

        if (polynode.polygon.size > 0 && match) {
            add(polynode.polygon)
        }
        for (pn in polynode.getChilds()) {
            addPolyNode(pn, nt)
        }
    }

    @JvmOverloads fun cleanPolygons(distance: Double = 1.415): Paths {
        val result = Paths(size)
        for (i in 0..size - 1) {
            result.add(get(i).cleanPolygon(distance))
        }
        return result
    }

    val bounds: LongRect
        get() {

            var i = 0
            val cnt = size
            val result = LongRect()
            while (i < cnt && get(i).isEmpty()) {
                i++
            }
            if (i == cnt) {
                return result
            }

            result.left = get(i)[0].x
            result.right = result.left
            result.top = get(i)[0].y
            result.bottom = result.top
            while (i < cnt) {
                for (j in 0..get(i).size - 1) {
                    if (get(i)[j].x < result.left) {
                        result.left = get(i)[j].x
                    } else if (get(i)[j].x > result.right) {
                        result.right = get(i)[j].x
                    }
                    if (get(i)[j].y < result.top) {
                        result.top = get(i)[j].y
                    } else if (get(i)[j].y > result.bottom) {
                        result.bottom = get(i)[j].y
                    }
                }
                i++
            }
            return result
        }

    fun reversePaths() {
        for (poly in this) {
            poly.reverse()
        }
    }

    companion object {

        fun closedPathsFromPolyTree(polytree: PolyTree): Paths {
            val result = Paths()
            //        result.Capacity = polytree.Total;
            result.addPolyNode(polytree, PolyNode.NodeType.CLOSED)
            return result
        }

        fun makePolyTreeToPaths(polytree: PolyTree): Paths {

            val result = Paths()
            //        result.Capacity = polytree.Total;
            result.addPolyNode(polytree, PolyNode.NodeType.ANY)
            return result
        }

        fun openPathsFromPolyTree(polytree: PolyTree): Paths {
            val result = Paths()
            //        result.Capacity = polytree.ChildCount;
            for (c in polytree.getChilds()) {
                if (c.isOpen) {
                    result.add(c.polygon)
                }
            }
            return result
        }

        /**

         */
        private val serialVersionUID = 1910552127810480852L
    }

}
